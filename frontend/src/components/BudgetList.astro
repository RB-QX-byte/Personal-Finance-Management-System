---
export interface Props {
  budgets?: Array<{
    id: string;
    name: string;
    amount: number;
    period: 'weekly' | 'monthly' | 'quarterly' | 'yearly';
    start_date: string;
    end_date?: string;
    description?: string;
    is_active: boolean;
    categories: {
      id: string;
      name: string;
      color: string;
      icon: string;
    };
  }>;
  budgetTracking?: Array<{
    budget_id: string;
    spent_amount: number;
    remaining_amount: number;
    percentage_used: number;
    status: 'under_budget' | 'on_track' | 'over_budget';
    is_over_budget: boolean;
  }>;
  currency?: string;
}

const { budgets = [], budgetTracking = [], currency = '$' } = Astro.props;

const getStatusColor = (status: string) => {
  switch (status) {
    case 'over_budget':
      return 'text-red-600 bg-red-50';
    case 'on_track':
      return 'text-yellow-600 bg-yellow-50';
    case 'under_budget':
      return 'text-green-600 bg-green-50';
    default:
      return 'text-gray-600 bg-gray-50';
  }
};

const getProgressColor = (status: string) => {
  switch (status) {
    case 'over_budget':
      return 'bg-red-500';
    case 'on_track':
      return 'bg-yellow-500';
    case 'under_budget':
      return 'bg-green-500';
    default:
      return 'bg-gray-300';
  }
};

const formatPeriod = (period: string) => {
  return period.charAt(0).toUpperCase() + period.slice(1);
};

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
};

const getBudgetTracking = (budgetId: string) => {
  return budgetTracking.find(tracking => tracking.budget_id === budgetId);
};

const getStatusText = (status: string) => {
  switch (status) {
    case 'over_budget':
      return 'Over Budget';
    case 'on_track':
      return 'On Track';
    case 'under_budget':
      return 'Under Budget';
    default:
      return 'No Data';
  }
};
---

<div class="bg-white rounded-lg shadow-sm border border-gray-200">
  <div class="p-6 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-semibold text-gray-900">Your Budgets</h2>
      <button
        id="add-budget-btn"
        class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors"
      >
        Add Budget
      </button>
    </div>
  </div>
  
  <div class="p-6">
    {budgets.length === 0 ? (
      <div class="text-center py-12">
        <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No budgets yet</h3>
        <p class="text-gray-500 mb-4">Create your first budget to start tracking your spending.</p>
        <button
          id="create-first-budget-btn"
          class="bg-primary-600 hover:bg-primary-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors"
        >
          Create Your First Budget
        </button>
      </div>
    ) : (
      <div class="space-y-4">
        {budgets.map((budget) => {
          const tracking = getBudgetTracking(budget.id);
          const spentAmount = tracking?.spent_amount || 0;
          const remainingAmount = tracking?.remaining_amount || budget.amount;
          const percentage = tracking?.percentage_used || 0;
          const status = tracking?.status || 'under_budget';
          
          return (
            <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-center space-x-3">
                  <div
                    class="w-4 h-4 rounded-full"
                    style={`background-color: ${budget.categories.color}`}
                  ></div>
                  <div>
                    <h3 class="font-medium text-gray-900">{budget.name}</h3>
                    <p class="text-sm text-gray-500 flex items-center space-x-1">
                      <span>{budget.categories.icon}</span>
                      <span>{budget.categories.name}</span>
                      <span>â€¢</span>
                      <span>{formatPeriod(budget.period)}</span>
                    </p>
                  </div>
                </div>
                
                <div class="flex items-center space-x-2">
                  <span class={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(status)}`}>
                    {getStatusText(status)}
                  </span>
                  <div class="flex items-center space-x-1">
                    <button
                      class="text-gray-400 hover:text-gray-600 p-1"
                      onclick={`editBudget('${budget.id}')`}
                      title="Edit Budget"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                    </button>
                    <button
                      class="text-gray-400 hover:text-red-600 p-1"
                      onclick={`deleteBudget('${budget.id}', '${budget.name}')`}
                      title="Delete Budget"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              
              <div class="space-y-2">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">Spent</span>
                  <span class="font-medium">
                    {currency}{spentAmount.toLocaleString()} of {currency}{budget.amount.toLocaleString()}
                  </span>
                </div>
                
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div
                    class={`h-2 rounded-full transition-all duration-300 ${getProgressColor(status)}`}
                    style={`width: ${Math.min(percentage, 100)}%`}
                  ></div>
                </div>
                
                <div class="flex justify-between text-sm">
                  <span class="text-gray-600">{Math.round(percentage)}% used</span>
                  <span class={remainingAmount >= 0 ? 'text-green-600' : 'text-red-600'}>
                    {remainingAmount >= 0 ? currency + remainingAmount.toLocaleString() + ' remaining' : 'Over by ' + currency + Math.abs(remainingAmount).toLocaleString()}
                  </span>
                </div>
              </div>
              
              <div class="mt-3 pt-3 border-t border-gray-100">
                <div class="flex justify-between text-xs text-gray-500">
                  <span>
                    {formatDate(budget.start_date)} - {budget.end_date ? formatDate(budget.end_date) : 'Ongoing'}
                  </span>
                  <span class={budget.is_active ? 'text-green-600' : 'text-gray-400'}>
                    {budget.is_active ? 'Active' : 'Inactive'}
                  </span>
                </div>
                {budget.description && (
                  <p class="text-xs text-gray-500 mt-1">{budget.description}</p>
                )}
              </div>
            </div>
          );
        })}
      </div>
    )}
  </div>
</div>

<script>
  // Event handlers for budget management
  document.getElementById('add-budget-btn')?.addEventListener('click', () => {
    showBudgetForm();
  });
  
  document.getElementById('create-first-budget-btn')?.addEventListener('click', () => {
    showBudgetForm();
  });
  
  function showBudgetForm(budgetId = null) {
    // This function should open the budget form modal or navigate to the budget form page
    // Implementation depends on your routing setup
    if (budgetId) {
      // Edit existing budget
      window.location.href = `/budgets/edit/${budgetId}`;
    } else {
      // Create new budget
      window.location.href = '/budgets/new';
    }
  }
  
  function editBudget(budgetId) {
    showBudgetForm(budgetId);
  }
  
  async function deleteBudget(budgetId, budgetName) {
    if (confirm(`Are you sure you want to delete "${budgetName}"? This action cannot be undone.`)) {
      try {
        const response = await fetch(`/api/budgets?id=${budgetId}`, {
          method: 'DELETE',
        });
        
        if (response.ok) {
          showNotification('Budget deleted successfully!', 'success');
          window.location.reload();
        } else {
          const error = await response.text();
          showNotification(error || 'Failed to delete budget', 'error');
        }
      } catch (error) {
        console.error('Error deleting budget:', error);
        showNotification('Failed to delete budget', 'error');
      }
    }
  }
  
  // Notification function
  function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${
      type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>