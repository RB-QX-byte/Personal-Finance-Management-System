---
export interface Props {
  goal: {
    id: string;
    name: string;
    description?: string;
    target_amount: number;
    current_amount: number;
    target_date?: string;
    is_completed: boolean;
  };
  currency?: string;
  compact?: boolean;
}

const { goal, currency = '$', compact = false } = Astro.props;

const progressPercentage = Math.min((goal.current_amount / goal.target_amount) * 100, 100);
const remaining = goal.target_amount - goal.current_amount;
const targetDate = goal.target_date ? new Date(goal.target_date) : null;
const daysRemaining = targetDate ? Math.ceil((targetDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : null;

let statusColor = 'bg-gray-500';
let statusText = 'Just Started';

if (goal.is_completed) {
  statusColor = 'bg-green-500';
  statusText = 'Completed';
} else if (progressPercentage >= 75) {
  statusColor = 'bg-blue-500';
  statusText = 'On Track';
} else if (progressPercentage >= 25) {
  statusColor = 'bg-yellow-500';
  statusText = 'In Progress';
}
---

<div class={`bg-white rounded-lg shadow ${compact ? 'p-4' : 'p-6'} goal-progress-card`}>
  <div class="flex items-center justify-between mb-3">
    <div class="flex-1">
      <h3 class={`font-medium text-gray-900 ${compact ? 'text-sm' : 'text-lg'}`}>{goal.name}</h3>
      {goal.description && !compact && (
        <p class="text-sm text-gray-600 mt-1">{goal.description}</p>
      )}
    </div>
    <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white ${statusColor}`}>
      {statusText}
    </span>
  </div>
  
  <!-- Progress Bar -->
  <div class="mb-3">
    <div class="flex justify-between text-sm text-gray-600 mb-2">
      <span>Progress</span>
      <span>{Math.round(progressPercentage)}%</span>
    </div>
    <div class="w-full bg-gray-200 rounded-full h-3">
      <div 
        class={`h-3 rounded-full transition-all duration-500 ${goal.is_completed ? 'bg-green-500' : 'bg-blue-500'}`}
        style={`width: ${progressPercentage}%`}
      ></div>
    </div>
  </div>
  
  <!-- Amount Info -->
  <div class={`grid gap-${compact ? '2' : '4'} ${compact ? 'grid-cols-2' : 'grid-cols-3'} text-sm`}>
    <div>
      <p class="text-gray-600">Current</p>
      <p class="font-medium text-gray-900">{currency}{goal.current_amount.toLocaleString()}</p>
    </div>
    <div>
      <p class="text-gray-600">Target</p>
      <p class="font-medium text-gray-900">{currency}{goal.target_amount.toLocaleString()}</p>
    </div>
    {!compact && (
      <div>
        <p class="text-gray-600">Remaining</p>
        <p class="font-medium text-gray-900">{currency}{Math.max(remaining, 0).toLocaleString()}</p>
      </div>
    )}
  </div>
  
  {targetDate && !compact && (
    <div class="mt-3 text-sm">
      <p class="text-gray-600">Target Date: {targetDate.toLocaleDateString()}</p>
      {daysRemaining !== null && (
        <p class={`${daysRemaining < 30 ? 'text-red-600' : 'text-gray-500'}`}>
          {daysRemaining > 0 ? `${daysRemaining} days remaining` : 'Overdue'}
        </p>
      )}
    </div>
  )}
</div>

<style>
  .goal-progress-card {
    transition: all 0.2s ease-in-out;
  }
  
  .goal-progress-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
</style>