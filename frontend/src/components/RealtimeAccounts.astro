---
// This component displays account summary with real-time updates
export interface Props {
  initialAccounts?: any[];
}

const { initialAccounts = [] } = Astro.props;
---

<div class="bg-white rounded-lg shadow">
  <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
    <h2 class="text-lg font-medium text-gray-900">Account Summary</h2>
    <a href="/accounts" class="text-sm text-blue-600 hover:text-blue-800 font-medium transition-colors">
      Manage â†’
    </a>
  </div>
  
  <div id="accounts-container" class="p-6">
    <!-- Initial content will be replaced by real-time updates -->
    <div id="total-balance" class="mb-4 p-4 bg-gray-50 rounded-lg">
      <div class="text-center">
        <p class="text-sm font-medium text-gray-600">Total Balance</p>
        <p class="text-2xl font-bold text-gray-900">$0</p>
      </div>
    </div>
    
    <div id="accounts-list" class="space-y-3">
      {initialAccounts.length > 0 ? (
        initialAccounts.map((account) => (
          <div class="account-item flex items-center justify-between p-3 bg-gray-50 rounded-lg" data-account-id={account.id}>
            <div class="flex items-center space-x-3">
              <div class={`w-3 h-3 rounded-full ${
                account.account_type === 'checking' ? 'bg-blue-500' :
                account.account_type === 'savings' ? 'bg-green-500' :
                account.account_type === 'credit_card' ? 'bg-red-500' :
                account.account_type === 'investment' ? 'bg-purple-500' :
                'bg-gray-500'
              }`}></div>
              <div>
                <p class="text-sm font-medium text-gray-900">{account.name}</p>
                <p class="text-xs text-gray-500 capitalize">{account.account_type.replace('_', ' ')}</p>
              </div>
            </div>
            <div class="text-right">
              <p class={`text-sm font-medium ${account.balance >= 0 ? 'text-gray-900' : 'text-red-600'}`}>
                ${account.balance.toLocaleString()}
              </p>
            </div>
          </div>
        ))
      ) : (
        <div class="text-center py-8">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900">No accounts yet</h3>
          <p class="mt-1 text-sm text-gray-500">Add your first account to get started.</p>
        </div>
      )}
    </div>
  </div>
</div>

<script>
  // Import store and set up real-time updates
  import('/src/lib/store.js').then(({ accountsStore, totalNetWorth }) => {
    const container = document.getElementById('accounts-container');
    const totalBalanceElement = document.getElementById('total-balance');
    const accountsListElement = document.getElementById('accounts-list');
    
    if (!container || !totalBalanceElement || !accountsListElement) return;

    // Subscribe to accounts store changes
    const unsubscribeAccounts = accountsStore.subscribe((accounts) => {
      updateAccountsList(accounts);
    });

    // Subscribe to net worth changes
    const unsubscribeNetWorth = totalNetWorth.subscribe((netWorth) => {
      updateTotalBalance(netWorth);
    });

    // Clean up subscriptions when page unloads
    const cleanup = () => {
      unsubscribeAccounts();
      unsubscribeNetWorth();
    };
    
    window.addEventListener('beforeunload', cleanup);
    window.addEventListener('pagehide', cleanup);

    function updateTotalBalance(netWorth) {
      const totalBalance = netWorth.netWorth;
      const totalBalanceFormatted = totalBalance.toLocaleString();
      
      totalBalanceElement.innerHTML = `
        <div class="text-center transition-all duration-300">
          <p class="text-sm font-medium text-gray-600">Total Net Worth</p>
          <p class="text-2xl font-bold ${totalBalance >= 0 ? 'text-gray-900' : 'text-red-600'}">
            ${totalBalance >= 0 ? '$' : '-$'}${Math.abs(totalBalance).toLocaleString()}
          </p>
          <div class="mt-2 grid grid-cols-2 gap-4 text-xs text-gray-500">
            <div>
              <span class="text-green-600">Assets: $${netWorth.assets.toLocaleString()}</span>
            </div>
            <div>
              <span class="text-red-600">Liabilities: $${netWorth.liabilities.toLocaleString()}</span>
            </div>
          </div>
        </div>
      `;
    }

    function updateAccountsList(accounts) {
      if (accounts.length === 0) {
        accountsListElement.innerHTML = `
          <div class="text-center py-8 transition-all duration-300">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No accounts yet</h3>
            <p class="mt-1 text-sm text-gray-500">Add your first account to get started.</p>
          </div>
        `;
        return;
      }

      // Build HTML for accounts
      const accountsHTML = accounts.map(account => {
        const colorClass = getAccountColorClass(account.account_type);
        return `
          <div class="account-item flex items-center justify-between p-3 bg-gray-50 rounded-lg transition-all duration-300 hover:bg-gray-100" data-account-id="${account.id}">
            <div class="flex items-center space-x-3">
              <div class="w-3 h-3 rounded-full ${colorClass}"></div>
              <div>
                <p class="text-sm font-medium text-gray-900">${account.name}</p>
                <p class="text-xs text-gray-500 capitalize">${account.account_type.replace('_', ' ')}</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-sm font-medium ${account.balance >= 0 ? 'text-gray-900' : 'text-red-600'}">
                ${account.balance >= 0 ? '$' : '-$'}${Math.abs(account.balance).toLocaleString()}
              </p>
            </div>
          </div>
        `;
      }).join('');

      // Update list with smooth transition
      accountsListElement.classList.add('opacity-50');
      setTimeout(() => {
        accountsListElement.innerHTML = accountsHTML;
        accountsListElement.classList.remove('opacity-50');
        
        // Add animation to new items
        const newItems = accountsListElement.querySelectorAll('.account-item');
        newItems.forEach((item, index) => {
          item.style.animationDelay = `${index * 50}ms`;
          item.classList.add('animate-slide-in');
        });
      }, 150);
    }

    function getAccountColorClass(accountType) {
      const colors = {
        'checking': 'bg-blue-500',
        'savings': 'bg-green-500',
        'credit_card': 'bg-red-500',
        'investment': 'bg-purple-500',
        'loan': 'bg-orange-500',
        'other': 'bg-gray-500'
      };
      return colors[accountType] || 'bg-gray-500';
    }
  }).catch(error => {
    console.error('Failed to load real-time accounts:', error);
  });
</script>

<style>
  .animate-slide-in {
    animation: slideIn 0.3s ease-out forwards;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .account-item {
    transition: all 0.2s ease-in-out;
  }
</style>