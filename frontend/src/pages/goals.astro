---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';

// Check authentication
const cookies = Astro.cookies;
const accessToken = cookies.get('sb-access-token')?.value;

if (!accessToken) {
  return Astro.redirect('/login');
}

// Get user
const { data: { user }, error: userError } = await supabase.auth.getUser(accessToken);

if (userError || !user) {
  return Astro.redirect('/login');
}

// Fetch goals
const { data: goals, error: goalsError } = await supabase
  .from('goals')
  .select('*')
  .eq('user_id', user.id)
  .eq('is_active', true)
  .order('created_at', { ascending: false });

const pageTitle = 'Financial Goals';
---

<Layout title={pageTitle}>
  <div class="min-h-screen bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Page Header -->
      <div class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900">{pageTitle}</h1>
          <p class="mt-2 text-gray-600">Set, track, and achieve your financial goals</p>
        </div>
        <button 
          id="add-goal-btn"
          class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
        >
          Add New Goal
        </button>
      </div>
      
      <!-- Goals Overview Cards -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Completed Goals</p>
              <p class="text-2xl font-bold text-gray-900" id="completed-count">
                {goals?.filter(g => g.is_completed).length || 0}
              </p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Active Goals</p>
              <p class="text-2xl font-bold text-gray-900" id="active-count">
                {goals?.filter(g => !g.is_completed).length || 0}
              </p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z"></path>
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.51-1.31c-.562-.649-1.413-1.076-2.353-1.253V5z" clip-rule="evenodd"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Target</p>
              <p class="text-2xl font-bold text-gray-900" id="total-target">
                ${goals?.reduce((sum, g) => sum + (g.target_amount || 0), 0).toLocaleString() || '0'}
              </p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Goals List -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">Your Goals</h2>
        </div>
        
        <div id="goals-container" class="divide-y divide-gray-200">
          {goals && goals.length > 0 ? (
            goals.map((goal) => {
              const progressPercentage = Math.min((goal.current_amount / goal.target_amount) * 100, 100);
              const remaining = goal.target_amount - goal.current_amount;
              const targetDate = goal.target_date ? new Date(goal.target_date) : null;
              const daysRemaining = targetDate ? Math.ceil((targetDate.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : null;
              
              let statusColor = 'bg-gray-500';
              let statusText = 'Just Started';
              
              if (goal.is_completed) {
                statusColor = 'bg-green-500';
                statusText = 'Completed';
              } else if (progressPercentage >= 75) {
                statusColor = 'bg-blue-500';
                statusText = 'On Track';
              } else if (progressPercentage >= 25) {
                statusColor = 'bg-yellow-500';
                statusText = 'In Progress';
              }

              return (
                <div class="p-6 goal-card" data-goal-id={goal.id}>
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex-1">
                      <h3 class="text-lg font-medium text-gray-900">{goal.name}</h3>
                      {goal.description && (
                        <p class="text-sm text-gray-600 mt-1">{goal.description}</p>
                      )}
                    </div>
                    <div class="flex items-center space-x-2">
                      <span class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white ${statusColor}`}>
                        {statusText}
                      </span>
                      <button class="edit-goal-btn text-gray-400 hover:text-gray-500" data-goal-id={goal.id}>
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                        </svg>
                      </button>
                      <button class="delete-goal-btn text-gray-400 hover:text-red-500" data-goal-id={goal.id}>
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                  
                  <div class="space-y-3">
                    <!-- Progress Bar -->
                    <div>
                      <div class="flex justify-between text-sm text-gray-600 mb-1">
                        <span>Progress</span>
                        <span>{Math.round(progressPercentage)}%</span>
                      </div>
                      <div class="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          class={`h-2 rounded-full transition-all duration-300 ${goal.is_completed ? 'bg-green-500' : 'bg-blue-500'}`}
                          style={`width: ${progressPercentage}%`}
                        ></div>
                      </div>
                    </div>
                    
                    <!-- Amount Info -->
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                      <div>
                        <p class="text-gray-600">Current</p>
                        <p class="font-medium text-gray-900">${goal.current_amount.toLocaleString()}</p>
                      </div>
                      <div>
                        <p class="text-gray-600">Target</p>
                        <p class="font-medium text-gray-900">${goal.target_amount.toLocaleString()}</p>
                      </div>
                      <div>
                        <p class="text-gray-600">Remaining</p>
                        <p class="font-medium text-gray-900">${Math.max(remaining, 0).toLocaleString()}</p>
                      </div>
                      {targetDate && (
                        <div>
                          <p class="text-gray-600">Target Date</p>
                          <p class="font-medium text-gray-900">{targetDate.toLocaleDateString()}</p>
                          {daysRemaining !== null && (
                            <p class={`text-xs ${daysRemaining < 30 ? 'text-red-600' : 'text-gray-500'}`}>
                              {daysRemaining > 0 ? `${daysRemaining} days left` : 'Overdue'}
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                    
                    <!-- Quick Actions -->
                    <div class="flex space-x-2 pt-2">
                      <button 
                        class="update-progress-btn flex-1 bg-blue-50 hover:bg-blue-100 text-blue-700 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                        data-goal-id={goal.id}
                      >
                        Update Progress
                      </button>
                      {!goal.is_completed && (
                        <button 
                          class="mark-complete-btn bg-green-50 hover:bg-green-100 text-green-700 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                          data-goal-id={goal.id}
                        >
                          Mark Complete
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              );
            })
          ) : (
            <div class="p-12 text-center">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No goals yet</h3>
              <p class="mt-1 text-sm text-gray-500">Get started by creating your first financial goal.</p>
              <div class="mt-6">
                <button 
                  id="add-first-goal-btn"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  Create your first goal
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Goal Modal -->
  <div id="goal-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 id="modal-title" class="text-lg font-medium text-gray-900">Add New Goal</h3>
        </div>
        
        <form id="goal-form" class="px-6 py-4 space-y-4">
          <input type="hidden" id="goal-id" name="goalId">
          
          <div>
            <label for="goal-name" class="block text-sm font-medium text-gray-700">Goal Name</label>
            <input 
              type="text" 
              id="goal-name" 
              name="name" 
              required
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="e.g., Emergency Fund, Vacation, New Car"
            >
          </div>
          
          <div>
            <label for="goal-description" class="block text-sm font-medium text-gray-700">Description (optional)</label>
            <textarea 
              id="goal-description" 
              name="description" 
              rows="2"
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="Brief description of your goal"
            ></textarea>
          </div>
          
          <div>
            <label for="target-amount" class="block text-sm font-medium text-gray-700">Target Amount ($)</label>
            <input 
              type="number" 
              id="target-amount" 
              name="targetAmount" 
              required
              min="0"
              step="0.01"
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="10000"
            >
          </div>
          
          <div>
            <label for="current-amount" class="block text-sm font-medium text-gray-700">Current Amount ($)</label>
            <input 
              type="number" 
              id="current-amount" 
              name="currentAmount" 
              min="0"
              step="0.01"
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="0"
            >
          </div>
          
          <div>
            <label for="target-date" class="block text-sm font-medium text-gray-700">Target Date (optional)</label>
            <input 
              type="date" 
              id="target-date" 
              name="targetDate" 
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            >
          </div>
        </form>
        
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <button 
            type="button" 
            id="cancel-goal-btn"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            id="save-goal-btn"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
          >
            Save Goal
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Update Progress Modal -->
  <div id="progress-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen px-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">Update Progress</h3>
        </div>
        
        <form id="progress-form" class="px-6 py-4 space-y-4">
          <input type="hidden" id="progress-goal-id" name="goalId">
          
          <div>
            <label for="progress-amount" class="block text-sm font-medium text-gray-700">Amount to Add ($)</label>
            <input 
              type="number" 
              id="progress-amount" 
              name="amount" 
              required
              min="0"
              step="0.01"
              class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              placeholder="500"
            >
          </div>
          
          <div class="flex items-center">
            <input 
              type="checkbox" 
              id="set-absolute" 
              name="setAbsolute"
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            >
            <label for="set-absolute" class="ml-2 block text-sm text-gray-900">
              Set as absolute amount (instead of adding to current)
            </label>
          </div>
        </form>
        
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
          <button 
            type="button" 
            id="cancel-progress-btn"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
          <button 
            type="submit" 
            id="save-progress-btn"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700"
          >
            Update Progress
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .goal-card {
    transition: all 0.2s ease-in-out;
  }
  
  .goal-card:hover {
    background-color: #f9fafb;
  }
  
  .modal-backdrop {
    backdrop-filter: blur(4px);
  }
</style>

<script>
  // Global variables
  let currentEditingGoal = null;
  
  // Modal elements
  const goalModal = document.getElementById('goal-modal');
  const progressModal = document.getElementById('progress-modal');
  const goalForm = document.getElementById('goal-form');
  const progressForm = document.getElementById('progress-form');
  
  // Buttons
  const addGoalBtn = document.getElementById('add-goal-btn');
  const addFirstGoalBtn = document.getElementById('add-first-goal-btn');
  const cancelGoalBtn = document.getElementById('cancel-goal-btn');
  const saveGoalBtn = document.getElementById('save-goal-btn');
  const cancelProgressBtn = document.getElementById('cancel-progress-btn');
  const saveProgressBtn = document.getElementById('save-progress-btn');
  
  // Event listeners
  addGoalBtn?.addEventListener('click', () => openGoalModal());
  addFirstGoalBtn?.addEventListener('click', () => openGoalModal());
  cancelGoalBtn?.addEventListener('click', () => closeGoalModal());
  cancelProgressBtn?.addEventListener('click', () => closeProgressModal());
  
  // Handle goal form submission
  goalForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    await saveGoal();
  });
  
  // Handle progress form submission  
  progressForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    await updateProgress();
  });
  
  // Goal action buttons
  document.addEventListener('click', async (e) => {
    const target = e.target.closest('button');
    if (!target) return;
    
    const goalId = target.dataset.goalId;
    
    if (target.classList.contains('edit-goal-btn')) {
      await editGoal(goalId);
    } else if (target.classList.contains('delete-goal-btn')) {
      await deleteGoal(goalId);
    } else if (target.classList.contains('update-progress-btn')) {
      openProgressModal(goalId);
    } else if (target.classList.contains('mark-complete-btn')) {
      await markGoalComplete(goalId);
    }
  });
  
  // Functions
  function openGoalModal(goal = null) {
    currentEditingGoal = goal;
    const modalTitle = document.getElementById('modal-title');
    
    if (goal) {
      modalTitle.textContent = 'Edit Goal';
      populateGoalForm(goal);
    } else {
      modalTitle.textContent = 'Add New Goal';
      goalForm.reset();
    }
    
    goalModal.classList.remove('hidden');
  }
  
  function closeGoalModal() {
    goalModal.classList.add('hidden');
    goalForm.reset();
    currentEditingGoal = null;
  }
  
  function openProgressModal(goalId) {
    document.getElementById('progress-goal-id').value = goalId;
    progressForm.reset();
    progressModal.classList.remove('hidden');
  }
  
  function closeProgressModal() {
    progressModal.classList.add('hidden');
    progressForm.reset();
  }
  
  function populateGoalForm(goal) {
    document.getElementById('goal-id').value = goal.id;
    document.getElementById('goal-name').value = goal.name;
    document.getElementById('goal-description').value = goal.description || '';
    document.getElementById('target-amount').value = goal.target_amount;
    document.getElementById('current-amount').value = goal.current_amount;
    
    if (goal.target_date) {
      const date = new Date(goal.target_date);
      document.getElementById('target-date').value = date.toISOString().split('T')[0];
    }
  }
  
  async function saveGoal() {
    const formData = new FormData(goalForm);
    const goalData = {
      name: formData.get('name'),
      description: formData.get('description') || null,
      target_amount: parseFloat(formData.get('targetAmount')),
      current_amount: parseFloat(formData.get('currentAmount')) || 0,
      target_date: formData.get('targetDate') || null
    };
    
    try {
      const goalId = formData.get('goalId');
      let response;
      
      if (goalId) {
        // Update existing goal
        response = await fetch(`/api/goals/${goalId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(goalData),
        });
      } else {
        // Create new goal
        response = await fetch('/api/goals', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(goalData),
        });
      }
      
      if (response.ok) {
        closeGoalModal();
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Error saving goal: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      alert('Error saving goal: ' + error.message);
    }
  }
  
  async function editGoal(goalId) {
    try {
      const response = await fetch(`/api/goals/${goalId}`);
      if (response.ok) {
        const goal = await response.json();
        openGoalModal(goal);
      } else {
        alert('Error fetching goal details');
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  }
  
  async function deleteGoal(goalId) {
    if (!confirm('Are you sure you want to delete this goal?')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/goals/${goalId}`, {
        method: 'DELETE',
      });
      
      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Error deleting goal: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      alert('Error deleting goal: ' + error.message);
    }
  }
  
  async function updateProgress() {
    const formData = new FormData(progressForm);
    const goalId = formData.get('goalId');
    const amount = parseFloat(formData.get('amount'));
    const setAbsolute = formData.has('setAbsolute');
    
    try {
      const response = await fetch(`/api/goals/${goalId}/progress`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: amount,
          set_absolute: setAbsolute
        }),
      });
      
      if (response.ok) {
        closeProgressModal();
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Error updating progress: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      alert('Error updating progress: ' + error.message);
    }
  }
  
  async function markGoalComplete(goalId) {
    if (!confirm('Mark this goal as complete?')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/goals/${goalId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          is_completed: true
        }),
      });
      
      if (response.ok) {
        window.location.reload();
      } else {
        const error = await response.json();
        alert('Error marking goal as complete: ' + (error.error || 'Unknown error'));
      }
    } catch (error) {
      alert('Error: ' + error.message);
    }
  }
  
  // Close modals when clicking outside
  goalModal?.addEventListener('click', (e) => {
    if (e.target === goalModal) {
      closeGoalModal();
    }
  });
  
  progressModal?.addEventListener('click', (e) => {
    if (e.target === progressModal) {
      closeProgressModal();
    }
  });
</script>